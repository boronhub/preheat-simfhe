<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="214.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >logistic_regression.bootstrap_regression_arch.dram_limb_rd</text>
<text id="details" x="10.00" y="197" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="197" > </text>
<g id="frames">
<g >
<title>nesterov_update (352,321,536 dram_limb_rd, 0.42%)</title><rect x="1051.9" y="101" width="4.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1054.85" y="111.5" ></text>
</g>
<g >
<title>rotate_sum (11,123,294,208 dram_limb_rd, 13.29%)</title><rect x="895.1" y="85" width="156.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="898.09" y="95.5" >rotate_sum</text>
</g>
<g >
<title>multiply (1,906,311,168 dram_limb_rd, 2.28%)</title><rect x="562.1" y="85" width="26.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="565.11" y="95.5" >m..</text>
</g>
<g >
<title>slot_to_coeff (19,404,947,456 dram_limb_rd, 23.18%)</title><rect x="589.0" y="117" width="273.5" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="591.98" y="127.5" >slot_to_coeff</text>
</g>
<g >
<title>multiply (1,258,291,200 dram_limb_rd, 1.50%)</title><rect x="531.4" y="69" width="17.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="534.37" y="79.5" ></text>
</g>
<g >
<title>key_switch (3,485,466,624 dram_limb_rd, 4.16%)</title><rect x="321.1" y="53" width="49.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="324.12" y="63.5" >key_..</text>
</g>
<g >
<title>bootstrap_regression (83,726,696,448 dram_limb_rd, 100.00%)</title><rect x="10.0" y="149" width="1180.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >bootstrap_regression</text>
</g>
<g >
<title>mod_reduce_rescale (157,286,400 dram_limb_rd, 0.19%)</title><rect x="793.5" y="69" width="2.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="796.49" y="79.5" ></text>
</g>
<g >
<title>bootstrap (60,486,057,984 dram_limb_rd, 72.24%)</title><rect x="10.0" y="133" width="852.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >bootstrap</text>
</g>
<g >
<title>multiply_plain (717,225,984 dram_limb_rd, 0.86%)</title><rect x="1179.9" y="85" width="10.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1182.89" y="95.5" ></text>
</g>
<g >
<title>rotate_digits (3,452,960,768 dram_limb_rd, 4.12%)</title><rect x="370.2" y="69" width="48.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="373.25" y="79.5" >rota..</text>
</g>
<g >
<title>key_switch_inner_product (729,808,896 dram_limb_rd, 0.87%)</title><rect x="538.8" y="53" width="10.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="541.82" y="63.5" ></text>
</g>
<g >
<title>key_switch_inner_product (3,485,466,624 dram_limb_rd, 4.16%)</title><rect x="321.1" y="37" width="49.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="324.12" y="47.5" >key_..</text>
</g>
<g >
<title>double_multiply (943,718,400 dram_limb_rd, 1.13%)</title><rect x="455.6" y="85" width="13.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="458.65" y="95.5" ></text>
</g>
<g >
<title>key_switch_inner_product (956,301,312 dram_limb_rd, 1.14%)</title><rect x="881.6" y="69" width="13.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="884.61" y="79.5" ></text>
</g>
<g >
<title>key_switch_inner_product (1,906,311,168 dram_limb_rd, 2.28%)</title><rect x="562.1" y="69" width="26.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="565.11" y="79.5" >k..</text>
</g>
<g >
<title>add (176,160,768 dram_limb_rd, 0.21%)</title><rect x="1053.1" y="85" width="2.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1056.10" y="95.5" ></text>
</g>
<g >
<title>rotate_digits (2,358,247,424 dram_limb_rd, 2.82%)</title><rect x="829.2" y="69" width="33.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="832.22" y="79.5" >ro..</text>
</g>
<g >
<title>key_switch_inner_product (150,994,944 dram_limb_rd, 0.18%)</title><rect x="12.1" y="53" width="2.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="15.07" y="63.5" ></text>
</g>
<g >
<title>multiply (6,819,938,304 dram_limb_rd, 8.15%)</title><rect x="1083.8" y="85" width="96.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1086.78" y="95.5" >multiply</text>
</g>
<g >
<title>key_switch_inner_product (893,386,752 dram_limb_rd, 1.07%)</title><rect x="443.1" y="53" width="12.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="446.06" y="63.5" ></text>
</g>
<g >
<title>giant_step_basis (943,718,400 dram_limb_rd, 1.13%)</title><rect x="455.6" y="101" width="13.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="458.65" y="111.5" ></text>
</g>
<g >
<title>double_multiply (1,258,291,200 dram_limb_rd, 1.50%)</title><rect x="531.4" y="85" width="17.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="534.37" y="95.5" ></text>
</g>
<g >
<title>key_switch_inner_product (7,650,410,496 dram_limb_rd, 9.14%)</title><rect x="944.0" y="69" width="107.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="947.03" y="79.5" >key_switch_in..</text>
</g>
<g >
<title>logistic_regression (23,240,638,464 dram_limb_rd, 27.76%)</title><rect x="862.5" y="133" width="327.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="865.46" y="143.5" >logistic_regression</text>
</g>
<g >
<title>double_multiply (1,755,316,224 dram_limb_rd, 2.10%)</title><rect x="430.9" y="85" width="24.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="433.91" y="95.5" >d..</text>
</g>
<g >
<title>key_switch_hoisting (1,736,441,856 dram_limb_rd, 2.07%)</title><rect x="919.6" y="69" width="24.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="922.56" y="79.5" >k..</text>
</g>
<g >
<title>r_square (1,258,291,200 dram_limb_rd, 1.50%)</title><rect x="531.4" y="101" width="17.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="534.37" y="111.5" ></text>
</g>
<g >
<title>key_switch_inner_product (547,356,672 dram_limb_rd, 0.65%)</title><rect x="461.2" y="53" width="7.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="464.23" y="63.5" ></text>
</g>
<g >
<title>multiply (943,718,400 dram_limb_rd, 1.13%)</title><rect x="455.6" y="69" width="13.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="458.65" y="79.5" ></text>
</g>
<g >
<title>rotate (3,485,466,624 dram_limb_rd, 4.16%)</title><rect x="321.1" y="69" width="49.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="324.12" y="79.5" >rotate</text>
</g>
<g >
<title>key_switch (150,994,944 dram_limb_rd, 0.18%)</title><rect x="12.1" y="69" width="2.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="15.07" y="79.5" ></text>
</g>
<g >
<title>inner_product (13,438,550,016 dram_limb_rd, 16.05%)</title><rect x="862.5" y="101" width="189.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="865.46" y="111.5" >inner_product</text>
</g>
<g >
<title>key_switch (2,378,170,368 dram_limb_rd, 2.84%)</title><rect x="795.7" y="53" width="33.5" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="798.71" y="63.5" >ke..</text>
</g>
<g >
<title>multiply (1,755,316,224 dram_limb_rd, 2.10%)</title><rect x="430.9" y="69" width="24.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="433.91" y="79.5" >m..</text>
</g>
<g >
<title>key_switch_inner_product (754,974,720 dram_limb_rd, 0.90%)</title><rect x="1061.8" y="85" width="10.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1064.79" y="95.5" ></text>
</g>
<g >
<title>key_switch_hoisting (176,160,768 dram_limb_rd, 0.21%)</title><rect x="1059.3" y="85" width="2.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1062.30" y="95.5" ></text>
</g>
<g >
<title>fft (19,404,947,456 dram_limb_rd, 23.18%)</title><rect x="589.0" y="101" width="273.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="591.98" y="111.5" >fft</text>
</g>
<g >
<title>key_switch_inner_product (2,378,170,368 dram_limb_rd, 2.84%)</title><rect x="795.7" y="37" width="33.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="798.71" y="47.5" >ke..</text>
</g>
<g >
<title>coeff_to_slot (29,014,097,920 dram_limb_rd, 34.65%)</title><rect x="10.0" y="117" width="408.9" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >coeff_to_slot</text>
</g>
<g >
<title>mod_reduce_rescale (88,080,384 dram_limb_rd, 0.11%)</title><rect x="1055.6" y="85" width="1.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1058.58" y="95.5" ></text>
</g>
<g >
<title>rotate_sum (1,107,296,256 dram_limb_rd, 1.32%)</title><rect x="1056.8" y="101" width="15.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1059.82" y="111.5" ></text>
</g>
<g >
<title>leaf_prods (4,429,185,024 dram_limb_rd, 5.29%)</title><rect x="468.9" y="101" width="62.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="471.95" y="111.5" >leaf_p..</text>
</g>
<g >
<title>mod_reduce_rescale (232,783,872 dram_limb_rd, 0.28%)</title><rect x="317.8" y="69" width="3.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="320.84" y="79.5" ></text>
</g>
<g >
<title>fft_inner_bsgs (19,404,947,456 dram_limb_rd, 23.18%)</title><rect x="589.0" y="85" width="273.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="591.98" y="95.5" >fft_inner_bsgs</text>
</g>
<g >
<title>conj_and_add (297,795,584 dram_limb_rd, 0.36%)</title><rect x="10.0" y="101" width="4.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>tree_up (2,829,058,048 dram_limb_rd, 3.38%)</title><rect x="549.1" y="101" width="39.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="552.10" y="111.5" >tre..</text>
</g>
<g >
<title>multiply (2,315,255,808 dram_limb_rd, 2.77%)</title><rect x="862.5" y="85" width="32.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="865.46" y="95.5" >mu..</text>
</g>
<g >
<title>eval_sine (12,067,012,608 dram_limb_rd, 14.41%)</title><rect x="418.9" y="117" width="170.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="421.91" y="127.5" >eval_sine</text>
</g>
<g >
<title>add (805,306,368 dram_limb_rd, 0.96%)</title><rect x="1072.4" y="85" width="11.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1075.43" y="95.5" ></text>
</g>
<g >
<title>rotate (2,378,170,368 dram_limb_rd, 2.84%)</title><rect x="795.7" y="69" width="33.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="798.71" y="79.5" >ro..</text>
</g>
<g >
<title>fft_inner_bsgs (28,716,302,336 dram_limb_rd, 34.30%)</title><rect x="14.2" y="85" width="404.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="17.20" y="95.5" >fft_inner_bsgs</text>
</g>
<g >
<title>all (83,726,696,448 dram_limb_rd, 100%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>baby_step_basis (2,606,759,936 dram_limb_rd, 3.11%)</title><rect x="418.9" y="101" width="36.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="421.91" y="111.5" >bab..</text>
</g>
<g >
<title>iteration (23,240,638,464 dram_limb_rd, 27.76%)</title><rect x="862.5" y="117" width="327.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="865.46" y="127.5" >iteration</text>
</g>
<g >
<title>key_switch_hoisting (116,391,936 dram_limb_rd, 0.14%)</title><rect x="316.2" y="69" width="1.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="319.20" y="79.5" ></text>
</g>
<g >
<title>fft (28,716,302,336 dram_limb_rd, 34.30%)</title><rect x="14.2" y="101" width="404.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="17.20" y="111.5" >fft</text>
</g>
<g >
<title>mod_down (2,858,418,176 dram_limb_rd, 3.41%)</title><rect x="378.6" y="53" width="40.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="381.62" y="63.5" >mod..</text>
</g>
<g >
<title>key_switch_hoisting (78,643,200 dram_limb_rd, 0.09%)</title><rect x="792.4" y="69" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="795.38" y="79.5" ></text>
</g>
<g >
<title>rotate (150,994,944 dram_limb_rd, 0.18%)</title><rect x="12.1" y="85" width="2.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="15.07" y="95.5" ></text>
</g>
<g >
<title>key_switch_inner_product (2,818,572,288 dram_limb_rd, 3.37%)</title><rect x="1140.2" y="69" width="39.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1143.17" y="79.5" >key..</text>
</g>
<g >
<title>sigmoid_product (8,342,470,656 dram_limb_rd, 9.96%)</title><rect x="1072.4" y="101" width="117.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1075.43" y="111.5" >sigmoid_product</text>
</g>
<g >
<title>mod_down (1,952,448,512 dram_limb_rd, 2.33%)</title><rect x="834.9" y="53" width="27.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="837.94" y="63.5" >m..</text>
</g>
</g>
</svg>
